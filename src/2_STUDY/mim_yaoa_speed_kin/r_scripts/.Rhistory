install.packages("knitr")
# install.packages(c("tidyverse","purrr","R.matlab","readxl","dplyr"))
# install.packages("devtools")
---
title: "Report"
install.packages("latex")
tinytex::install_tinytex()
knitr::opts_chunk$set(echo = TRUE)
view(summary(lm(paste(mi,"~ cond_char"),tmpt)))
summary(lm(paste(mi,"~ cond_char"),tmpt))
excel_dir <-"M:/jsalminen/GitHub/par_EEGProcessing/src/_data/MIM_dataset/_studies/04162024_MIM_YAOAN89_antsnormalize_iccREMG0p4_powpow0p3_skull0p01/cluster/icrej_5/12/spec_data/group_spec/psd_calcs/fooof_kinematics_table.xlsx";
table_out <- read_excel(excel_dir,sheet="Sheet1")
library(readxl);
library(purrr);
library(tidyverse);
library(dplyr)
excel_dir <-"M:/jsalminen/GitHub/par_EEGProcessing/src/_data/MIM_dataset/_studies/04162024_MIM_YAOAN89_antsnormalize_iccREMG0p4_powpow0p3_skull0p01/cluster/icrej_5/12/spec_data/group_spec/psd_calcs/fooof_kinematics_table.xlsx";
table_out <- read_excel(excel_dir,sheet="Sheet1")
clusters = unique(table_out$cluster_id);
subjects = unique(table_out$subj_char);
eeg_measures = c('alpha_avg_power','beta_avg_power','theta_avg_power','aperiodic_exp','aperiodic_offset');
table_out <- filter_at(table_out,vars('cond_char'), any_vars(. %in% c('0.25','0.5','0.75','1.0')))
table_out <- mutate(table_out,across(c('cond_char','group_char'), factor))
for (ci in clusters) {
for (mi in eeg_measures) {
tmpt <- filter_at(table_out,vars('cluster_id'), any_vars(. %in% ci))
tapply(tmpt[[mi]],tmpt$cond_char)
contr.poly(4)
contrasts(tmpt$cond_char) = contr.poly(4)
summary(lm(paste(mi,"~ cond_char"),tmpt))
}
}
for (ci in clusters) {
for (mi in eeg_measures) {
tmpt <- filter_at(table_out,vars('cluster_id'), any_vars(. %in% ci))
tapply(tmpt[[mi]],tmpt$cond_char)
contr.poly(4)
contrasts(tmpt$cond_char) = contr.poly(4)
summary(lm(paste(mi,"~ cond_char"),tmpt))
}
}
### LOOP through clusters & get constrast summaries
```{r loop, echo=TRUE}
contr.poly(4)
clusters
tmpt <- filter_at(table_out,vars('cluster_id'), any_vars(. %in% ci))
for (ci in clusters) {
for (mi in eeg_measures) {
tmpt <- filter_at(table_out,vars('cluster_id'), any_vars(. %in% ci))
tapply(tmpt[[mi]],tmpt$cond_char)
contr.poly(4)
contrasts(tmpt$cond_char) = contr.poly(4)
summary(lm(paste(mi,"~ cond_char"),tmpt))
}
}
### LOOP through clusters & get constrast summaries
```{r loop, echo=TRUE}
### LOOP through clusters & get constrast summaries
```{r, echo=TRUE}
library(purrr);
library(broom);
library(readxl);
library(modelsummary);
install.packages('modelSummary')
install.packages('modelsummary')
library(readxl);
library(modelsummary);
library(kableExtra);
install.packages('kableExtra')
install.packages('broom')
install.packages("broom")
knitr::opts_chunk$set(echo = TRUE)
library(readxl);
library(modelsummary);
library(kableExtra);
library(broom);
library(purrr);
library(tidyverse);
library(dplyr)
excel_dir <-"M:/jsalminen/GitHub/par_EEGProcessing/src/_data/MIM_dataset/_studies/04162024_MIM_YAOAN89_antsnormalize_iccREMG0p4_powpow0p3_skull0p01/cluster/icrej_5/12/spec_data/group_spec/psd_calcs/fooof_kinematics_table.xlsx";
table_out <- read_excel(excel_dir,sheet="Sheet1")
clusters = unique(table_out$cluster_id);
subjects = unique(table_out$subj_char);
eeg_measures = c('alpha_avg_power','beta_avg_power','theta_avg_power','aperiodic_exp','aperiodic_offset');
table_out <- filter_at(table_out,vars('cond_char'), any_vars(. %in% c('0.25','0.5','0.75','1.0')))
table_out <- mutate(table_out,across(c('cond_char','group_char'), factor))
for (ci in clusters) {
for (mi in eeg_measures) {
tmpt <- filter_at(table_out,vars('cluster_id'), any_vars(. %in% ci))
tapply(tmpt[[mi]],tmpt$cond_char)
contr.poly(4)
contrasts(tmpt$cond_char) = contr.poly(4)
summary(lm(paste(mi,"~ cond_char"),tmpt))
}
}
for (ci in clusters) {
for (mi in eeg_measures) {
tmpt <- filter_at(table_out,vars('cluster_id'), any_vars(. %in% ci))
tapply(tmpt[[mi]],tmpt$cond_char)
contr.poly(4)
contrasts(tmpt$cond_char) = contr.poly(4)
fit <- lm(paste(mi,"~ cond_char"),tmpt)
tidy(fit)
modelsummary(fit, output="kableExtra")
}
}
latex(modelsummary(fit, output="kableExtra"))
seq(table_out)
tail(seq(table_out), -2)
seq(eeg_measures, 1)
tail(seq(eeg_measures), 1)
tail(seq(eeg_measures), -1)
seq(eeg_measures)
names(table_out)
invisible(sapply(seq(eeg_measures), function(i) {
fo <- reformulate(table_out[["cond_char"]],response=eeg_measures[i])
s <- modelsummary(do.call("lm", list(fo,quote(table_out))))
cat("\n##EEG Measure",eeg_measures[i],"\n")
sapply(1:length(eeg_measures), function(j)
cat(paste0("`", ". ", capture.output(s)[j]), "` \n"))
cat(" \n")
}))
table_out[["cond_char"]]
clusters = unique(table_out$cluster_id);
subjects = unique(table_out$subj_char);
eeg_measures = c('alpha_avg_power','beta_avg_power','theta_avg_power','aperiodic_exp','aperiodic_offset');
fo <- reformulate(table_out[["cond_char"]],response=eeg_measures[i])
fo <- reformulate(names(table_out)[10],response='alpha_avg_power';
fo <- reformulate(names(table_out)[10],response='alpha_avg_power');
fo
invisible(sapply(seq(eeg_measures), function(i) {
fo <- reformulate("cond_char",response=eeg_measures[i])
s <- modelsummary(do.call("lm", list(fo,quote(table_out))))
cat("\n##EEG Measure",eeg_measures[i],"\n")
sapply(1:length(eeg_measures), function(j)
cat(paste0("`", ". ", capture.output(s)[j]), "` \n"))
cat(" \n")
}))
list(fo,quote(table_out))
tidy(fit)
# invisible(sapply(seq(eeg_measures), function(i) {
#   fo <- reformulate("cond_char",response=eeg_measures[i])
#   s <- modelsummary(do.call("lm", list(fo,quote(table_out))))
#   cat("\n##EEG Measure",eeg_measures[i],"\n")
#   sapply(1:length(eeg_measures), function(j)
#     cat(paste0("`", ". ", capture.output(s)[j]), "` \n"))
#   cat(" \n")
# }))
for (ci in clusters) {
for (mi in eeg_measures) {
tmpt <- filter_at(table_out,vars('cluster_id'), any_vars(. %in% ci))
tapply(tmpt[[mi]],tmpt$cond_char)
contr.poly(4)
contrasts(tmpt$cond_char) = contr.poly(4)
fit <- lm(paste(mi,"~ cond_char"),tmpt)
tidy(fit)
# modelsummary(fit, output="kableExtra")
s <- summary(fit)
sapply(1:19, function(j)
cat(paste0("`", ". ", capture.output(s)[j]), "` \n"))
cat(" \n")
}
}
# invisible(sapply(seq(eeg_measures), function(i) {
#   fo <- reformulate("cond_char",response=eeg_measures[i])
#   s <- modelsummary(do.call("lm", list(fo,quote(table_out))))
#   cat("\n##EEG Measure",eeg_measures[i],"\n")
#   sapply(1:length(eeg_measures), function(j)
#     cat(paste0("`", ". ", capture.output(s)[j]), "` \n"))
#   cat(" \n")
# }))
for (ci in clusters) {
for (mi in eeg_measures) {
tmpt <- filter_at(table_out,vars('cluster_id'), any_vars(. %in% ci))
tapply(tmpt[[mi]],tmpt$cond_char)
contr.poly(4)
contrasts(tmpt$cond_char) = contr.poly(4)
fo <- reformulate("cond_char",response=eeg_measures[i])
s <- summary(do.call("lm", list(fo,quote(tmpt))))
# fit <- lm(paste(mi,"~ cond_char"),tmpt)
# tidy(fit)
# modelsummary(fit, output="kableExtra")
# s <- summary(fit)
cat("\n##EEG Measure",eeg_measures[i],"\n")
sapply(1:19, function(j)
cat(paste0("`", ". ", capture.output(s)[j]), "` \n"))
cat(" \n")
}
}
# invisible(sapply(seq(eeg_measures), function(i) {
#   fo <- reformulate("cond_char",response=eeg_measures[i])
#   s <- modelsummary(do.call("lm", list(fo,quote(table_out))))
#   cat("\n##EEG Measure",eeg_measures[i],"\n")
#   sapply(1:length(eeg_measures), function(j)
#     cat(paste0("`", ". ", capture.output(s)[j]), "` \n"))
#   cat(" \n")
# }))
for (ci in 1:length(clusters)) {
for (mi in 1:length(eeg_measures)) {
tmpt <- filter_at(table_out,vars('cluster_id'), any_vars(. %in% clusters[ci]))
tapply(tmpt[[eeg_measures[mi]]],tmpt$cond_char)
contr.poly(4)
contrasts(tmpt$cond_char) = contr.poly(4)
fo <- reformulate("cond_char",response=eeg_measures[mi])
s <- summary(do.call("lm", list(fo,quote(tmpt))))
# fit <- lm(paste(mi,"~ cond_char"),tmpt)
# tidy(fit)
# modelsummary(fit, output="kableExtra")
# s <- summary(fit)
cat("\n##EEG Measure",eeg_measures[mi],"\n")
sapply(1:19, function(j)
cat(paste0("`", ". ", capture.output(s)[j]), "` \n"))
cat(" \n")
}
}
# invisible(sapply(seq(eeg_measures), function(i) {
#   fo <- reformulate("cond_char",response=eeg_measures[i])
#   s <- modelsummary(do.call("lm", list(fo,quote(table_out))))
#   cat("\n##EEG Measure",eeg_measures[i],"\n")
#   sapply(1:length(eeg_measures), function(j)
#     cat(paste0("`", ". ", capture.output(s)[j]), "` \n"))
#   cat(" \n")
# }))
for (ci in 1:length(clusters)) {
for (mi in 1:length(eeg_measures)) {
tmpt <- filter_at(table_out,vars('cluster_id'), any_vars(. %in% clusters[ci]))
tapply(tmpt[[eeg_measures[mi]]],tmpt$cond_char)
contr.poly(4)
contrasts(tmpt$cond_char) = contr.poly(4)
fo <- reformulate("cond_char",response=eeg_measures[mi])
s <- summary(do.call("lm", list(fo,quote(tmpt))))
# fit <- lm(paste(mi,"~ cond_char"),tmpt)
# tidy(fit)
# modelsummary(fit, output="kableExtra")
# s <- summary(fit)
cat("\n##EEG Measure",eeg_measures[mi],"\n")
sapply(1:19, function(j)
cat(paste0("`", ". ", capture.output(s)[j]), "` \n"))
cat(" \n")
}
}
unlink("md_summary_contrasts_cache", recursive = TRUE)
# invisible(sapply(seq(eeg_measures), function(i) {
#   fo <- reformulate("cond_char",response=eeg_measures[i])
#   s <- modelsummary(do.call("lm", list(fo,quote(table_out))))
#   cat("\n##EEG Measure",eeg_measures[i],"\n")
#   sapply(1:length(eeg_measures), function(j)
#     cat(paste0("`", ". ", capture.output(s)[j]), "` \n"))
#   cat(" \n")
# }))
invisible(
for (ci in 1:length(clusters)) {
for (mi in 1:length(eeg_measures)) {
tmpt <- filter_at(table_out,vars('cluster_id'), any_vars(. %in% clusters[ci]))
tapply(tmpt[[eeg_measures[mi]]],tmpt$cond_char)
contr.poly(4)
contrasts(tmpt$cond_char) = contr.poly(4)
fo <- reformulate("cond_char",response=eeg_measures[mi])
s <- summary(do.call("lm", list(fo,quote(tmpt))))
# fit <- lm(paste(mi,"~ cond_char"),tmpt)
# tidy(fit)
# modelsummary(fit, output="kableExtra")
# s <- summary(fit)
cat("\n##EEG Measure",eeg_measures[mi],"\n")
sapply(1:19, function(j)
cat(paste0("`", ". ", capture.output(s)[j]), "` \n"))
cat(" \n")
}
}
)
# invisible(sapply(seq(eeg_measures), function(i) {
#   fo <- reformulate("cond_char",response=eeg_measures[i])
#   s <- modelsummary(do.call("lm", list(fo,quote(table_out))))
#   cat("\n##EEG Measure",eeg_measures[i],"\n")
#   sapply(1:length(eeg_measures), function(j)
#     cat(paste0("`", ". ", capture.output(s)[j]), "` \n"))
#   cat(" \n")
# }))
invisible(
for (ci in 1:length(clusters)) {
for (mi in 1:length(eeg_measures)) {
tmpt <- filter_at(table_out,vars('cluster_id'), any_vars(. %in% clusters[ci]))
tapply(tmpt[[eeg_measures[mi]]],tmpt$cond_char)
contr.poly(4)
contrasts(tmpt$cond_char) = contr.poly(4)
fo <- reformulate("cond_char",response=eeg_measures[mi])
s <- summary(do.call("lm", list(fo,quote(tmpt))))
tidy(s)
modelsummary(s, output="kableExtra")
# s <- summary(fit)
# cat("\n##EEG Measure",eeg_measures[mi],"\n")
# sapply(1:19, function(j)
# cat(paste0("`", ". ", capture.output(s)[j]), "` \n"))
# cat(" \n")
}
}
)
s
tidy(s)
modelsummary(s, output="kableExtra")
dd <- capture.output(modelsummary(s, output="kableExtra")
)
tmpt <- filter_at(table_out,vars('cluster_id'), any_vars(. %in% clusters[ci]))
tapply(tmpt[[eeg_measures[mi]]],tmpt$cond_char)
contr.poly(4)
contrasts(tmpt$cond_char) = contr.poly(4)
fo <- reformulate("cond_char",response=eeg_measures[mi])
fit <- do.call("lm", list(fo,quote(tmpt)))
fit <- tidy(fit)
s <- modelsummary(fit, output="kableExtra")
tmpt <- filter_at(table_out,vars('cluster_id'), any_vars(. %in% clusters[ci]))
tapply(tmpt[[eeg_measures[mi]]],tmpt$cond_char);
contr.poly(4)
contrasts(tmpt$cond_char) = contr.poly(4)
fo <- reformulate("cond_char",response=eeg_measures[mi])
fit <- do.call("lm", list(fo,quote(tmpt)))
tidy(fit)
s <- modelsummary(fit, output="kableExtra")
s
invisible(
for (ci in 1:length(clusters)) {
for (mi in 1:length(eeg_measures)) {
tmpt <- filter_at(table_out,vars('cluster_id'), any_vars(. %in% clusters[ci]));
tapply(tmpt[[eeg_measures[mi]]],tmpt$cond_char);
contr.poly(4)
contrasts(tmpt$cond_char) = contr.poly(4)
fo <- reformulate("cond_char",response=eeg_measures[mi])
fit <- do.call("lm", list(fo,quote(tmpt)))
tidy(fit)
s <- modelsummary(fit, output="kableExtra")
print(s)
# print(kable(s),col.names = c(".L",".Q",".C"))
cat("\n")
# s <- summary(fit)
# cat("\n##EEG Measure",eeg_measures[mi],"\n")
# sapply(1:19, function(j)
# cat(paste0("`", ". ", capture.output(s)[j]), "` \n"))
# cat(" \n")
}
}
)
install.packages('tinytex')
install.packages('xelatex')
xelatex:install_xelatex()
tinytex::install_tinytex()
tinytex::install_tinytex()
install.packages("tinytex")
tinytex::tlmgr_install('iftex')
tlmgr install iftex
tlmgr install iftex
unlink("md_summary_contrasts_cache", recursive = TRUE)
\maxdeadcycles=300
knitr::opts_chunk$set(echo = TRUE)
invisible(
for (ci in 1:length(clusters)) {
for (mi in 1:length(eeg_measures)) {
tmpt <- filter_at(table_out,vars('cluster_id'), any_vars(. %in% clusters[ci]));
tapply(tmpt[[eeg_measures[mi]]],tmpt$cond_char);
contr.poly(4)
contrasts(tmpt$cond_char) = contr.poly(4)
fo <- reformulate("cond_char",response=eeg_measures[mi])
fit <- do.call("lm", list(fo,quote(tmpt)))
tidy(fit)
# s <- modelsummary(fit, output="kableExtra")
# print(s)
# print(kable(s),col.names = c(".L",".Q",".C"))
# cat("\n")
s <- summary(fit)
cat("\n##EEG Measure",eeg_measures[mi],"\n")
sapply(1:19, function(j)
cat(paste0("`", ". ", capture.output(s)[j]), "` \n"))
cat(" \n")
}
}
)
