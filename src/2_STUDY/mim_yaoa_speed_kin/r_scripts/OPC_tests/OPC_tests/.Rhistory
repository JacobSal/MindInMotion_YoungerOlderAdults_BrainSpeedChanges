tapply(tmpt[[eeg_measures[mi]]],tmpt$cond_char);
print(contr.poly(4))
contrasts(tmpt$cond_char) = contr.poly(4)
fo <- reformulate("1+cond_char",response=eeg_measures[mi])
fit <- do.call("lm", list(fo,quote(tmpt)))
# tidy(fit)
s <- modelsummary(fit, output="kableExtra")
print(s)
print(kable(s),col.names = c(".L",".Q",".C"))
# cat("\n")
# s <- summary(fit)
# print(s)
# cat("##EEG Measure",eeg_measures[mi],"\n")
# sapply(1:19, function(j)
# cat(paste0("`", ". ", capture.output(s)[j]), "` \n"))
# cat(" \n")
tmpt <- filter_at(table_out,vars('cluster_id'), any_vars(. %in% clusters[ci]));
tapply(tmpt[[eeg_measures[mi]]],tmpt$cond_char);
# print(contr.poly(4))
contr.poly(4)
contrasts(tmpt$cond_char) = contr.poly(4)
fo <- reformulate("1+cond_char",response=eeg_measures[mi])
fit <- do.call("lm", list(fo,quote(tmpt)))
# tidy(fit)
s <- modelsummary(fit, output="kableExtra")
# print(s)
print(kable(s),col.names = c(".L",".Q",".C"))
# cat("\n")
# s <- summary(fit)
# print(s)
# cat("##EEG Measure",eeg_measures[mi],"\n")
# sapply(1:19, function(j)
# cat(paste0("`", ". ", capture.output(s)[j]), "` \n"))
# cat(" \n")
invisible(
for (ci in 1:length(clusters)) {
for (mi in 1:length(eeg_measures)) {
tmpt <- filter_at(table_out,vars('cluster_id'), any_vars(. %in% clusters[ci]));
tapply(tmpt[[eeg_measures[mi]]],tmpt$cond_char);
# print(contr.poly(4))
contr.poly(4);
contrasts(tmpt$cond_char) = contr.poly(4);
fo <- reformulate("1+cond_char",response=eeg_measures[mi]);
fit <- do.call("lm", list(fo,quote(tmpt)));
# tidy(fit)
cat("##EEG Measure",eeg_measures[mi],"\n");
# s <- modelsummary(fit, output="kableExtra");
# print(s)
# print(kable(s),col.names = c(".L",".Q",".C"));
# cat("\n")
s <- summary(fit)
# print(s)
# cat("##EEG Measure",eeg_measures[mi],"\n")
# sapply(1:19, function(j)
# cat(paste0("`", ". ", capture.output(s)[j]), "` \n"))
# cat(" \n")
}
}
)
invisible(
for (ci in 1:length(clusters)) {
for (mi in 1:length(eeg_measures)) {
tmpt <- filter_at(table_out,vars('cluster_id'), any_vars(. %in% clusters[ci]));
tapply(tmpt[[eeg_measures[mi]]],tmpt$cond_char);
# print(contr.poly(4))
contr.poly(4);
contrasts(tmpt$cond_char) = contr.poly(4);
fo <- reformulate("1+cond_char",response=eeg_measures[mi]);
fit <- do.call("lm", list(fo,quote(tmpt)));
# tidy(fit)
cat("##EEG Measure",eeg_measures[mi],"\n");
# s <- modelsummary(fit, output="kableExtra");
# print(s)
# print(kable(s),col.names = c(".L",".Q",".C"));
# cat("\n")
# s <- summary(fit)
# print(s)
cat("##EEG Measure",eeg_measures[mi],"\n")
sapply(1:19, function(j)
cat(paste0("`", ". ", capture.output(s)[j]), "` \n"))
cat(" \n")
}
}
)
invisible(
for (ci in 1:length(clusters)) {
for (mi in 1:length(eeg_measures)) {
tmpt <- filter_at(table_out,vars('cluster_id'), any_vars(. %in% clusters[ci]));
tapply(tmpt[[eeg_measures[mi]]],tmpt$cond_char);
# print(contr.poly(4))
contr.poly(4);
contrasts(tmpt$cond_char) = contr.poly(4);
fo <- reformulate("1+cond_char",response=eeg_measures[mi]);
fit <- do.call("lm", list(fo,quote(tmpt)));
# tidy(fit)
cat("##EEG Measure",eeg_measures[mi],"\n");
# s <- modelsummary(fit, output="kableExtra");
# print(s)
# print(kable(s),col.names = c(".L",".Q",".C"));
# cat("\n")
s <- summary(fit)
# print(s)
cat("##EEG Measure",eeg_measures[mi],"\n")
sapply(1:19, function(j)
cat(paste0("`", ". ", capture.output(s)[j]), "` \n"))
cat(" \n")
}
}
)
plot(density(tmpt$beta_avg_power))
invisible(
for (ci in 1:length(clusters)) {
for (mi in 1:length(eeg_measures)) {
tmpt <- filter_at(table_out,vars('cluster_id'), any_vars(. %in% clusters[ci]));
tapply(tmpt[[eeg_measures[mi]]],tmpt$cond_char);
# print(contr.poly(4))
contr.poly(4);
contrasts(tmpt$cond_char) = contr.poly(4);
fo <- reformulate("1+cond_char",response=eeg_measures[mi]);
fit <- do.call("lm", list(fo,quote(tmpt)));
# tidy(fit)
cat("##EEG Measure",eeg_measures[mi],"\n");
# s <- modelsummary(fit, output="kableExtra");
# print(s)
# print(kable(s),col.names = c(".L",".Q",".C"));
# cat("\n")
# s <- summary(fit)
# print(s)
# cat("##EEG Measure",eeg_measures[mi],"\n")
# sapply(1:19, function(j)
# cat(paste0("`", ". ", capture.output(s)[j]), "` \n"))
# cat(" \n")
print(plot(density(tmpt$eeg_measures[mi])))
}
}
)
invisible(
for (ci in 1:length(clusters)) {
for (mi in 1:length(eeg_measures)) {
tmpt <- filter_at(table_out,vars('cluster_id'), any_vars(. %in% clusters[ci]));
tapply(tmpt[[eeg_measures[mi]]],tmpt$cond_char);
# print(contr.poly(4))
contr.poly(4);
contrasts(tmpt$cond_char) = contr.poly(4);
fo <- reformulate("1+cond_char",response=eeg_measures[mi]);
fit <- do.call("lm", list(fo,quote(tmpt)));
# tidy(fit)
cat("##EEG Measure",eeg_measures[mi],"\n");
# s <- modelsummary(fit, output="kableExtra");
# print(s)
# print(kable(s),col.names = c(".L",".Q",".C"));
# cat("\n")
# s <- summary(fit)
# print(s)
# cat("##EEG Measure",eeg_measures[mi],"\n")
# sapply(1:19, function(j)
# cat(paste0("`", ". ", capture.output(s)[j]), "` \n"))
# cat(" \n")
print(plot(density(tmpt$eeg_measures[mi])))
}
}
)
tmpt$eeg_measures[mi]
tmpt$[eeg_measures[mi]]
tmpt[eeg_measures[mi]]
invisible(
for (ci in 1:length(clusters)) {
for (mi in 1:length(eeg_measures)) {
tmpt <- filter_at(table_out,vars('cluster_id'), any_vars(. %in% clusters[ci]));
tapply(tmpt[[eeg_measures[mi]]],tmpt$cond_char);
# print(contr.poly(4))
contr.poly(4);
contrasts(tmpt$cond_char) = contr.poly(4);
fo <- reformulate("1+cond_char",response=eeg_measures[mi]);
fit <- do.call("lm", list(fo,quote(tmpt)));
# tidy(fit)
cat("##EEG Measure",eeg_measures[mi],"\n");
# s <- modelsummary(fit, output="kableExtra");
# print(s)
# print(kable(s),col.names = c(".L",".Q",".C"));
# cat("\n")
# s <- summary(fit)
# print(s)
# cat("##EEG Measure",eeg_measures[mi],"\n")
# sapply(1:19, function(j)
# cat(paste0("`", ". ", capture.output(s)[j]), "` \n"))
# cat(" \n")
print(plot(density(tmpt[eeg_measures[mi]])))
}
}
)
View(tmpt)
tmpt[mi]
density(tmpt[mi])
tmpt[,mi]
lapply(tmpt,eeg_measures[mi])
tmpt[[eeg_measures[mi]]]
invisible(
for (ci in 1:length(clusters)) {
for (mi in 1:length(eeg_measures)) {
tmpt <- filter_at(table_out,vars('cluster_id'), any_vars(. %in% clusters[ci]));
tapply(tmpt[[eeg_measures[mi]]],tmpt$cond_char);
# print(contr.poly(4))
contr.poly(4);
contrasts(tmpt$cond_char) = contr.poly(4);
fo <- reformulate("1+cond_char",response=eeg_measures[mi]);
fit <- do.call("lm", list(fo,quote(tmpt)));
# tidy(fit)
cat("##EEG Measure",eeg_measures[mi],"\n");
# s <- modelsummary(fit, output="kableExtra");
# print(s)
# print(kable(s),col.names = c(".L",".Q",".C"));
# cat("\n")
# s <- summary(fit)
# print(s)
# cat("##EEG Measure",eeg_measures[mi],"\n")
# sapply(1:19, function(j)
# cat(paste0("`", ". ", capture.output(s)[j]), "` \n"))
# cat(" \n")
print(plot(density(tmpt[[eeg_measures[mi]]])))
}
}
)
View(tmpt)
excel_dir <-"M:/jsalminen/GitHub/par_EEGProcessing/src/_data/MIM_dataset/_studies/04162024_MIM_YAOAN89_antsnormalize_iccREMG0p4_powpow0p3_skull0p01/cluster/icrej_5/12/spec_data/group_spec/psd_calcs/fooof_kinematics_table.xlsx";
table_out <- read_excel(excel_dir,sheet="Sheet1")
clusters = unique(table_out$cluster_id);
subjects = unique(table_out$subj_char);
eeg_measures = c('alpha_avg_power','beta_avg_power','theta_avg_power','aperiodic_exp','aperiodic_offset');
# table_out <- filter_at(table_out,vars('cond_char'), any_vars(. %in% c('0.25','0.5','0.75','1.0')))
table_out <- filter_at(table_out,vars('cond_char'), any_vars(. %in% c('flat','low','med','high')))
table_out <- mutate(table_out,across(c('cond_char','group_char'), factor))
head(table_out)
invisible(
for (ci in 1:length(clusters)) {
for (mi in 1:length(eeg_measures)) {
tmpt <- filter_at(table_out,vars('cluster_id'), any_vars(. %in% clusters[ci]));
tapply(tmpt[[eeg_measures[mi]]],tmpt$cond_char);
# print(contr.poly(4))
contr.poly(4);
contrasts(tmpt$cond_char) = contr.poly(4);
fo <- reformulate("1+cond_char",response=eeg_measures[mi]);
fit <- do.call("lm", list(fo,quote(tmpt)));
# tidy(fit)
cat("##EEG Measure",eeg_measures[mi],"\n");
# s <- modelsummary(fit, output="kableExtra");
# print(s)
# print(kable(s),col.names = c(".L",".Q",".C"));
# cat("\n")
# s <- summary(fit)
# print(s)
# cat("##EEG Measure",eeg_measures[mi],"\n")
# sapply(1:19, function(j)
# cat(paste0("`", ". ", capture.output(s)[j]), "` \n"))
# cat(" \n")
print(plot(density(tmpt[[eeg_measures[mi]]])))
}
}
)
invisible(
for (ci in 1:length(clusters)) {
for (mi in 1:length(eeg_measures)) {
tmpt <- filter_at(table_out,vars('cluster_id'), any_vars(. %in% clusters[ci]));
tapply(tmpt[[eeg_measures[mi]]],tmpt$cond_char);
# print(contr.poly(4))
contr.poly(4);
contrasts(tmpt$cond_char) = contr.poly(4);
fo <- reformulate("1+cond_char",response=eeg_measures[mi]);
fit <- do.call("lm", list(fo,quote(tmpt)));
# tidy(fit)
cat("##EEG Measure",eeg_measures[mi],"\n");
# s <- modelsummary(fit, output="kableExtra");
# print(s)
# print(kable(s),col.names = c(".L",".Q",".C"));
# cat("\n")
s <- summary(fit)
# print(s)
cat("##EEG Measure",eeg_measures[mi],"\n")
sapply(1:19, function(j)
cat(paste0("`", ". ", capture.output(s)[j]), "` \n"))
cat(" \n")
# print(plot(density(tmpt[[eeg_measures[mi]]])))
}
}
)
excel_dir <-"M:/jsalminen/GitHub/par_EEGProcessing/src/_data/MIM_dataset/_studies/04162024_MIM_YAOAN89_antsnormalize_iccREMG0p4_powpow0p3_skull0p01/cluster/icrej_5/12/spec_data/group_spec/psd_calcs/fooof_kinematics_table.xlsx";
table_out <- read_excel(excel_dir,sheet="Sheet1")
clusters = unique(table_out$cluster_id);
subjects = unique(table_out$subj_char);
eeg_measures = c('alpha_avg_power','beta_avg_power','theta_avg_power','aperiodic_exp','aperiodic_offset');
# table_out <- filter_at(table_out,vars('cond_char'), any_vars(. %in% c('0.25','0.5','0.75','1.0')))
# table_out <- filter_at(table_out,vars('cond_char'), any_vars(. %in% c('flat','low','med','high')))
table_out <- filter_at(table_out,vars('cond_char'), any_vars(. %in% c('high')))
table_out <- mutate(table_out,across(c('cond_char','group_char'), factor))
head(table_out)
View(tmpt)
View(tmpt)
table_out <- mutate(table_out,across(c('cond_char','group_char'), factor))
head(table_out)
t.test(tmpt$cond_char,tmpt$aperiodic_exp,alternative = c("two.sided", "less", "greater"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95)
table_out <- filter_at(table_out,vars('cond_char'), any_vars(. %in% c('0.25','0.5','0.75','1.0')))
# table_out <- filter_at(table_out,vars('cond_char'), any_vars(. %in% c('flat','low','med','high')))
# table_out <- filter_at(table_out,vars('cond_char'), any_vars(. %in% c('high')))
flat_speeds = table_out$cond_char;
flat_speeds
excel_dir <-"M:/jsalminen/GitHub/par_EEGProcessing/src/_data/MIM_dataset/_studies/04162024_MIM_YAOAN89_antsnormalize_iccREMG0p4_powpow0p3_skull0p01/cluster/icrej_5/12/spec_data/group_spec/psd_calcs/fooof_kinematics_table.xlsx";
table_out <- read_excel(excel_dir,sheet="Sheet1")
clusters = unique(table_out$cluster_id);
subjects = unique(table_out$subj_char);
eeg_measures = c('alpha_avg_power','beta_avg_power','theta_avg_power','aperiodic_exp','aperiodic_offset');
table_out <- filter_at(table_out,vars('cond_char'), any_vars(. %in% c('0.25','0.5','0.75','1.0')))
# table_out <- filter_at(table_out,vars('cond_char'), any_vars(. %in% c('flat','low','med','high')))
# table_out <- filter_at(table_out,vars('cond_char'), any_vars(. %in% c('high')))
flat_speeds = table_out$cond_char;
flat_speeds
flat_speeds
flat_speeds = unique(table_out$cond_char);
flat_speeds
excel_dir <-"M:/jsalminen/GitHub/par_EEGProcessing/src/_data/MIM_dataset/_studies/04162024_MIM_YAOAN89_antsnormalize_iccREMG0p4_powpow0p3_skull0p01/cluster/icrej_5/12/spec_data/group_spec/psd_calcs/fooof_kinematics_table.xlsx";
table_out <- read_excel(excel_dir,sheet="Sheet1")
clusters = unique(table_out$cluster_id);
subjects = unique(table_out$subj_char);
groups = unique(table_out$group_char);
eeg_measures = c('alpha_avg_power','beta_avg_power','theta_avg_power','aperiodic_exp','aperiodic_offset');
table_out <- filter_at(table_out,vars('cond_char'), any_vars(. %in% c('0.25','0.5','0.75','1.0')))
# table_out <- filter_at(table_out,vars('cond_char'), any_vars(. %in% c('flat','low','med','high')))
# table_out <- filter_at(table_out,vars('cond_char'), any_vars(. %in% c('high')))
flat_speeds = unique(table_out$cond_char);
groups
table_out <- mutate(table_out,across(c('cond_char','group_char'), factor))
head(table_out)
invisible(
for (ci in 1:length(clusters)) {
for (mi in 1:length(eeg_measures)) {
tmpt <- filter_at(table_out,vars('cluster_id'), any_vars(. %in% clusters[ci]));
for (si in 1:length(flat_speeds)) {
ti <- filter_at(tmpt,vars('cond_char'), any_vars(. %in% flat_speeds[si]));
for (sj in 1:length(flat_speeds)) {
tj <- filter_at(tmpt,vars('cond_char'), any_vars(. %in% flat_speeds[sj]));
for (gi in 1:length(groups)) {
ti <- filter_at(tmpt,vars('group_char'), any_vars(. %in% groups[gi]));
for (gj in 1:length(groups)) {
tj <- filter_at(tmpt,vars('group_char'), any_vars(. %in% groups[gj]));
t.test(ti[[eeg_measures[mi]]],tj[[eeg_measures[mi]]],alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95)
}
}
}
}
}
}
)
t_out <- t.test(ti[[eeg_measures[mi]]],tj[[eeg_measures[mi]]],alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95)
t_out
View(ti)
View(tj)
gj
gi
summary(t_out)
invisible(
for (ci in 1:length(clusters)) {
for (mi in 1:length(eeg_measures)) {
tmpt <- filter_at(table_out,vars('cluster_id'), any_vars(. %in% clusters[ci]));
for (si in 1:length(flat_speeds)) {
ti <- filter_at(tmpt,vars('cond_char'), any_vars(. %in% flat_speeds[si]));
for (sj in 1:length(flat_speeds)) {
tj <- filter_at(tmpt,vars('cond_char'), any_vars(. %in% flat_speeds[sj]));
for (gi in 1:length(groups)) {
ti <- filter_at(tmpt,vars('group_char'), any_vars(. %in% groups[gi]));
for (gj in 1:length(groups)) {
if (gi != gj & si != sj){
tj <- filter_at(tmpt,vars('group_char'), any_vars(. %in% groups[gj]));
t_out <- t.test(ti[[eeg_measures[mi]]],tj[[eeg_measures[mi]]],alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95)
print(t_out)
}
}
}
}
}
}
}
)
invisible(
for (ci in 1:length(clusters)) {
for (mi in 1:length(eeg_measures)) {
tmpt <- filter_at(table_out,vars('cluster_id'), any_vars(. %in% clusters[ci]));
for (si in 1:length(flat_speeds)) {
ti <- filter_at(tmpt,vars('cond_char'), any_vars(. %in% flat_speeds[si]));
for (sj in 1:length(flat_speeds)) {
tj <- filter_at(tmpt,vars('cond_char'), any_vars(. %in% flat_speeds[sj]));
for (gi in 1:length(groups)) {
ti <- filter_at(tmpt,vars('group_char'), any_vars(. %in% groups[gi]));
for (gj in 1:length(groups)) {
if (gi != gj & si != sj){
cat("## EEG Measure: ",eeg_measures[mi]," Speed1: ",flat_speeds(si)," Speed2: ",flat_speeds(sj)," Group1: ",groups(gi)," Group2: ",groups(gj));
tj <- filter_at(tmpt,vars('group_char'), any_vars(. %in% groups[gj]));
t_out <- t.test(ti[[eeg_measures[mi]]],tj[[eeg_measures[mi]]],alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95)
print(t_out)
}
}
}
}
}
}
}
)
ti <- filter_at(tmpt,vars('group_char'), any_vars(. %in% groups[gi]));
invisible(
for (ci in 1:length(clusters)) {
for (mi in 1:length(eeg_measures)) {
tmpt <- filter_at(table_out,vars('cluster_id'), any_vars(. %in% clusters[ci]));
for (si in 1:length(flat_speeds)) {
ti <- filter_at(tmpt,vars('cond_char'), any_vars(. %in% flat_speeds[si]));
for (sj in 1:length(flat_speeds)) {
tj <- filter_at(tmpt,vars('cond_char'), any_vars(. %in% flat_speeds[sj]));
for (gi in 1:length(groups)) {
ti <- filter_at(tmpt,vars('group_char'), any_vars(. %in% groups[gi]));
for (gj in 1:length(groups)) {
if (gi != gj & si != sj){
cat("## EEG Measure: ",eeg_measures[mi]," Speed1: ",flat_speeds[si]," Speed2: ",flat_speeds[sj]," Group1: ",groups[gi]," Group2: ",groups[gj]);
tj <- filter_at(tmpt,vars('group_char'), any_vars(. %in% groups[gj]));
t_out <- t.test(ti[[eeg_measures[mi]]],tj[[eeg_measures[mi]]],alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95)
print(t_out)
}
}
}
}
}
}
}
)
my_vector <- vector(mode="numeric")
my_vector
my_vector <- append(my_vector,[1,2])
my_vector <- append(my_vector,1,2)
my_vector
sidone <- vector(mode="numeric")
sjdone <- vector(mode="numeric")
gidone <- vector(mode="numeric")
gjdone <- vector(mode="numeric")
gidone <- append(gidone, gi);
gidone
match(gidone,gi)
invisible(
for (ci in 1:length(clusters)) {
for (mi in 1:length(eeg_measures)) {
tmpt <- filter_at(table_out,vars('cluster_id'), any_vars(. %in% clusters[ci]));
sidone <- vector(mode="numeric")
sjdone <- vector(mode="numeric")
gidone <- vector(mode="numeric")
gjdone <- vector(mode="numeric")
for (si in 1:length(flat_speeds)) {
tsi <- filter_at(tmpt,vars('cond_char'), any_vars(. %in% flat_speeds[si]));
for (sj in 1:length(flat_speeds)) {
tsj <- filter_at(tmpt,vars('cond_char'), any_vars(. %in% flat_speeds[sj]));
for (gi in 1:length(groups)) {
tgi <- filter_at(tsi,vars('group_char'), any_vars(. %in% groups[gi]));
for (gj in 1:length(groups)) {
tgj <- filter_at(tsj,vars('group_char'), any_vars(. %in% groups[gj]));
if (si != sj){
cat("## EEG Measure: ",eeg_measures[mi]," Speed1: ",flat_speeds[si]," Speed2: ",flat_speeds[sj]," Group1: ",groups[gi]," Group2:   ",groups[gj]);
t_out <- t.test(tgi[[eeg_measures[mi]]],tgj[[eeg_measures[mi]]],alternative = c("two.sided"),
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95)
print(t_out)
match(gidone,gi)
match(gjdone,gj)
match(sidone,si)
match(sjdone,sj)
gidone <- append(gidone, gi);
gjdone <- append(gjdone, gj);
sidone <- append(sidone, si);
sjdone <- append(sjdone, sj);
}
}
}
}
}
}
}
)
gidone
match(sjdone,sj)
sj
sjdone
match(gidone,gi)
gi
gj
gidone
gjdone
match(gjdone,gj)
any(match(gjdone,gj))
sidone
sjdone
gi
gidone
gjdone
my_vector <- append(my_vector,1,2)
match(sjdone,si)
sjdone,si
gc()
