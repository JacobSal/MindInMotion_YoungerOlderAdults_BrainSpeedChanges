%   Project Title: Run a graph analysis for multiple subjects
%
%   Code Designer: Jacob salminen
%
%   Version History --> See details at the end of the script.
%   Current Version:  v1.0.20220103.0
%   Previous Version: n/a
%   Summary: 

% sbatch /blue/dferris/jsalminen/GitHub/par_EEGProcessing/src/2_GLOBAL_BATCH/gamma/MIM_OA_proc/_helper_scripts/run_recoop_study_files.sh

%{
%## RESTORE MATLAB
% WARNING: restores default pathing to matlab 
restoredefaultpath;
clc;
close all;
clearvars
%}
%% Initialization
% opengl('dsave', 'software') % might be needed to plot dipole plots?
%## TIME
tic
%% REQUIRED SETUP 4 ALL SCRIPTS
%- DATE TIME
dt = datetime;
dt.Format = 'MMddyyyy';
%- VARS
USER_NAME = 'jsalminen'; %getenv('username');
fprintf(1,'Current User: %s\n',USER_NAME);
%- CD
% cfname_path    = mfilename('fullpath');
% cfpath = strsplit(cfname_path,filesep);
% cd(cfpath);
%% PATH TO YOUR GITHUB REPO
%- GLOBAL VARS
REPO_NAME = 'par_EEGProcessing';
%- determine OS
if strncmp(computer,'PC',2)
    DO_UNIX = false;
    PATH_EXT = 'M';
    PATH_ROOT = ['M:' filesep USER_NAME filesep 'GitHub']; % path 2 your github folder
else  % isunix
    DO_UNIX = true;
    PATH_EXT = 'dferris';
    PATH_ROOT = [filesep 'blue' filesep 'dferris',...
        filesep USER_NAME filesep 'GitHub']; % path 2 your github folder
end
%% SETWORKSPACE
%- define the directory to the src folder
source_dir = [PATH_ROOT filesep REPO_NAME filesep 'src'];
run_dir = [source_dir filesep '2_GLOBAL_BATCH' filesep 'gamma' filesep 'MIM_OA_proc' filesep '_helper_scripts'];
%- cd to source directory
cd(source_dir)
%- addpath for local folder
addpath(source_dir)
addpath(run_dir)
%- set workspace
global ADD_CLEANING_SUBMODS
ADD_CLEANING_SUBMODS = false;
setWorkspace
%% PARPOOL SETUP
if ~ispc
%     eeg_options;
    pop_editoptions('option_parallel',0,'option_storedisk',1);
    disp(['SLURM_JOB_ID: ', getenv('SLURM_JOB_ID')]);
    disp(['SLURM_CPUS_ON_NODE: ', getenv('SLURM_CPUS_ON_NODE')]);
    %## allocate slurm resources to parpool in matlab
    %- get cpu's on node and remove a few for parent script.
    SLURM_POOL_SIZE = str2double(getenv('SLURM_CPUS_ON_NODE'));
    %- create cluster
    pp = parcluster('local');
    %- Number of workers for processing (NOTE: this number should be higher
    %then the number of iterations in your for loop)
    % pp.NumWorkers = POOL_SIZE-3;
    % pp.NumThreads = 1;
    fprintf('Number of workers: %i\n',pp.NumWorkers);
    fprintf('Number of threads: %i\n',pp.NumThreads);
    %- make meta data directory for slurm
    mkdir([run_dir filesep getenv('SLURM_JOB_ID')])
    pp.JobStorageLocation = strcat([run_dir filesep], getenv('SLURM_JOB_ID'));
    %- create your p-pool (NOTE: gross!!)
    pPool = parpool(pp, SLURM_POOL_SIZE, 'IdleTimeout', 1440);
else
    pop_editoptions('option_parallel',0,'option_storedisk',1);
    SLURM_POOL_SIZE = 1;
end
%% ================================================================= %%
%## PATHS
%- hardcode data_dir
DATA_SET = 'MIM_dataset';
DATA_DIR = [source_dir filesep '_data'];
%- path for local data
STUDIES_DIR = [DATA_DIR filesep DATA_SET filesep '_studies'];
SUBJINF_DIR = [DATA_DIR filesep DATA_SET filesep '_subjinf'];
%## DATASET SPECIFIC
%- MIND IN MOTION (SUBSET (07/25/2022)
% SUBJ_YNG = {'H1004','H1007','H1009','H1010','H1011','H1012','H1013','H1017','H1020',...
%     'H1022','H1024','H1026','H1027','H1033','H1034'};
% SUBJ_HMA = {'H2002', 'H2010', 'H2015', 'H2017', 'H2020', 'H2021', 'H2022', 'H2023',...
%     'H2025', 'H2026', 'H2034', 'H2059', 'H2062', 'H2082', 'H2095'};
% SUBJ_NMA = {'NH3008', 'NH3043', 'NH3055', 'NH3059', 'NH3069', ...
%     'NH3070', 'NH3074', 'NH3086', 'NH3090', 'NH3104', 'NH3105', 'NH3106', 'NH3112', 'NH3114'};
%- MIND IN MOTION (SUBSET (03/10/2023)
SUBJ_NORUN = {'H2012_FU', 'H2013_FU', 'H2018_FU', 'H2020_FU', 'H2021_FU',...
            'H3024_Case','H3029_FU','H3039_FU','H3063_FU','NH3021_Case', 'NH3023_Case','NH3025_Case', 'NH3030_FU',...
            'NH3068_FU', 'NH3036_FU', 'NH3058_FU'};
SUBJ_MISSING_TRIAL_DATA = {'H2012','H2018','H3024','NH3002', 'NH3004','NH3009',...
    'NH3023','NH3027', 'NH3028', 'NH3129', 'NH3040'};

SUBJ_2HMA = {'H2017', 'H2010', 'H2002', 'H2007', 'H2008', 'H2013', 'H2015',...
    'H2020', 'H2021', 'H2022', 'H2023',...
    'H2025', 'H2026', 'H2027', 'H2033', 'H2034', 'H2036', 'H2037', 'H2038',...
    'H2039', 'H2041', 'H2042', 'H2052', 'H2059', 'H2062', 'H2072', 'H2082',...
    'H2090', 'H2095', 'H2111', 'H2117'};
% SUBJ_3HMA = {'H3018','H3029','H3034','H3039','H3042','H3046',...
%     'H3047','H3053','H3063','H3072','H3073','H3077','H3092','H3103','H3107','H3120'}; % JACOB,SAL(02/23/2023)
SUBJ_3NHMA = {'H3018','H3029','H3034','H3039','H3042','H3046',...
    'H3047','H3053','H3063','H3072','H3073','H3077','H3092','H3103','H3107','H3120',...
    'NH3006', 'NH3007', 'NH3008', 'NH3010',...
    'NH3021', 'NH3025', 'NH3026',...
    'NH3030', 'NH3036',...
    'NH3041', 'NH3043', 'NH3051', 'NH3054', 'NH3055', 'NH3056', 'NH3058',...
    'NH3059', 'NH3066', 'NH3068', 'NH3069', 'NH3070', 'NH3071', 'NH3074',...
    'NH3076', 'NH3082', 'NH3086', 'NH3090', 'NH3102', 'NH3104', 'NH3105', 'NH3106',...
    'NH3108', 'NH3110', 'NH3112', 'NH3113', 'NH3114', 'NH3123', 'NH3128'}; % JACOB,SAL(02/23/2023)
%- trial types
% TRIAL_TYPES = {'rest','0p25','0p5','0p75','1p0','flat','low','med','high'};
TRIAL_TYPES = {'0p25','0p5','0p75','1p0','flat','low','med','high'};
% TRIAL_TYPES = {'0p25'};
%- Subject Picks
% SUBJ_PICS = {SUBJ_2HMA,SUBJ_3HMA,SUBJ_3NHMA};
SUBJ_PICS = {SUBJ_2HMA,SUBJ_3NHMA};
GROUP_NAMES = {'H2000''s','H3000''s'};
% SUBJ_ITERS = {1:length(SUBJ_2HMA),1:length(SUBJ_3HMA),1:length(SUBJ_3NHMA)}; % JACOB,SAL(02/23/2023)
SUBJ_ITERS = {1:length(SUBJ_2HMA),1:length(SUBJ_3NHMA)}; 
% N_SUBS = 5;
% SUBJ_ITERS = {get_unique_randi(length(SUBJ_2HMA),N_SUBS,1)',get_unique_randi(length(SUBJ_3NHMA),N_SUBS,1)'};
%- Subject Picks
% SUBJ_PICS = {SUBJ_YNG,SUBJ_HMA,SUBJ_NMA}; % CHANG,LIU(07/25/2022)
% SUBJ_ITERS = {[],1:length(SUBJ_HMA),1:length(SUBJ_NMA)}; % CHANG,LIU(07/25/2022)
%- Subject Directory Information
% PREPROCESS_NAME = '8std_iCC0p9_ChanRej0p5_TimeRej0p4_winTol10'; % CHANG,LIU(07/25/2022)
% OUTSIDE_DATA_DIR = 'M:\liu.chang1\STUDY-preprocess-MiM_20220725'; % CHANG,LIU(07/25/2022)
% OUTSIDE_DATA_SUFFIX = 'ICA_ICLabel_dipfit_templateElec';% CHANG,LIU(07/25/2022)
% OUTSIDE_DATA_SUFFIX = 'ICA_ICLabel_dipfit_fem'; % CHANG,LIU(07/25/2022)
OA_PREP_FPATH = '24022023_OA_prep'; % JACOB,SAL(02/23/2023)
OUTSIDE_DATA_DIR = [DATA_DIR filesep DATA_SET filesep '_studies' filesep OA_PREP_FPATH]; % JACOB,SAL(02/23/2023)
%## CONVERT PATHS
if DO_UNIX
    OUTSIDE_DATA_DIR = convertPath2UNIX(OUTSIDE_DATA_DIR);
else
    OUTSIDE_DATA_DIR = convertPath2Drive(OUTSIDE_DATA_DIR);
end
%% global script chain (VERSION 1)
%- datetime override
% dt = '16032023_OA_subset'; % OA (03/22/2023) JS
dt = '02042023_OA_subset';
% dt = '31032023_OA_subset_randi';
%## PATH & TEMP STUDY NAME
%- hard define
DO_CONN_ANL = false;
SAVE_EEG = true;
SESSION_NUMBER = '1';
study_fName_1 = sprintf('copy_study');
study_fName_2 = 'reduced_comps_study';
%- soft define
path2BEM  = [PATHS.path4EEGlab filesep 'plugins' filesep 'dipfit' filesep 'standard_BEM' filesep];
mniMRI = fullfile(path2BEM, 'standard_mri.mat');
mniVol = fullfile(path2BEM, 'standard_vol.mat');
mniChan1005 = fullfile(path2BEM,'elec','standard_1005.elc');
TRIAL_OVERRIDE_FPATH = [STUDIES_DIR filesep 'subject_mgmt' filesep 'trial_event_indices_override.xlsx'];
save_dir = [STUDIES_DIR filesep sprintf('%s',dt)];
load_dir = [STUDIES_DIR filesep sprintf('%s',dt)];
%- create new study directory
if ~exist(save_dir,'dir')
    mkdir(save_dir);
end
%% RECOOPING STUDY FILES AFTER ERRROR

fprintf(1,'\n==== LOADING REDUCED CLUSTER STUDY DATA ====\n');
if ~ispc
    [MAIN_STUDY,MAIN_ALLEEG] = pop_loadstudy('filename',[study_fName_2 '_UNIX.study'],'filepath',save_dir);
else
    [MAIN_STUDY,MAIN_ALLEEG] = pop_loadstudy('filename',[study_fName_2 '.study'],'filepath',save_dir);
end
% MAIN_ALLEEG = eeg_checkset(MAIN_ALLEEG,'loaddata');
% for subj_i = 1:length(MAIN_ALLEEG)
%     if isempty(MAIN_ALLEEG(subj_i).icaact)
%         fprintf('%s) Recalculating ICA activations\n',MAIN_ALLEEG(subj_i).subject);
%         MAIN_ALLEEG(subj_i).icaact = (MAIN_ALLEEG(subj_i).icaweights*MAIN_ALLEEG(subj_i).icasphere)*MAIN_ALLEEG(subj_i).data(MAIN_ALLEEG(subj_i).icachansind,:);
%     end
% end
rmv_subj = zeros(1,length(MAIN_ALLEEG));
rmv_subj_chars = cell(1,length(MAIN_ALLEEG));
%%
%- assiging important dipfit model information for later recall
fprintf('==== Reassigning MRI for MNI plotting ====\n');
for subj_i = 1:length(MAIN_ALLEEG)
    EEG = MAIN_ALLEEG(subj_i);
     try
        EEG.dipfit.coord_transform;
        EEG.dipfit.mrifile;
        EEG.dipfit.hdmfile;
        EEG.dipfit.coordformat;
    catch e
        fprintf(['error. identifier: %s\n',...
                 'error. %s\n',...
                 'error. on subject %s\n'],e.identifier,e.message,EEG.subject);
        fprintf('MNI pop_dipfit_settings...\n');
        %{
        EEG = pop_dipfit_settings(EEG,'coordformat','MNI','coord_transform',COORD_TRANSFORM_MNI,...
                'hdmfile',MNI_VOL,'mrifile',MNI_MRI,'chanfile',MNI_CHAN_1005);
        %}
        tmp = [];
        if ~isfield(EEG.dipfit,'coord_transform')
            EEG.dipfit.coord_transform = COORD_TRANSFORM_MNI;
            tmp = [tmp, 'added default coord_transform; '];
        end
        if ~isfield(EEG.dipfit,'mrifile')
            EEG.dipfit.mrifile = MNI_MRI;
            tmp = [tmp, 'added default mrifile; '];
        end
        if ~isfield(EEG.dipfit,'hdmfile')
            EEG.dipfit.hdmfile = MNI_VOL;
            tmp = [tmp, 'added default hdmfile; '];
        end
        if ~isfield(EEG.dipfit,'coordformat')
            EEG.dipfit.coordformat = 'MNI';
            tmp = [tmp, 'added default coordformat; '];
        end
        if ~isfield(EEG.dipfit,'chanfile')
            EEG.dipfit.chanfile = MNI_CHAN_1005;
            tmp = [tmp, 'added default chanfile; '];
        end
        if ~isfield(EEG.dipfit,'chansel')
            EEG.dipfit.chansel = (1:EEG.nbchan);
            tmp = [tmp, 'added default chansel; '];
        end
        EEG.dipfit.comment = tmp;
    end
end
%% PCA REDUCTION
% [MAIN_STUDY,MAIN_ALLEEG,comps_out,outliers] = cluster_pca_reduce(MAIN_STUDY,MAIN_ALLEEG);
%% CREATE STUDY FILE FOR EACH CONDITION
%{
fprintf('==== SAVING STUDIES ====\n');
for cond_i = 1:length(TRIAL_TYPES)
    tmp_alleeg = cell(1,length(tmp));
    study_fName_2 = sprintf('%s_MIM_study',TRIAL_TYPES{cond_i});
    %- extract each condition for each subject
    for subj_i = 1:length(tmp)
        fPath = MAIN_ALLEEG(subj_i).filepath;
        fPath = [save_dir filesep MAIN_ALLEEG(subj_i).subject filesep 'EPOCHED'];
        dir_fPath = dir([fPath filesep '*.set']);
        if isempty(dir_fPath)
            continue;
        else
            EEG = pop_loadset('filename',dir_fPath.name,'filepath',fPath);
            tmp_alleeg{subj_i} = EEG;
        end
    end
    tmp_alleeg = cellfun(@(x) [[]; x], tmp_alleeg);
    %## CREATE NEW STUDY STRUCTURED
    [tmp_study, tmp_alleeg] = std_editset(MAIN_STUDY,tmp_alleeg,...
                                'rmclust','off',...
                                'addchannellabels','on',...
                                'name',study_fName_2,...
                                'commands',{'remove',find(rmv_subj)});
    %- study modifications
%     tmp_study.urcluster = MAIN_STUDY.cluster;
    tmp_study.red_urcluster = MAIN_STUDY.cluster;
    tmp_study.rmvd_subj_inds = find(rmv_subj);
    tmp_study.filename = [study_fName_2 '.study'];
    tmp_study.name = study_fName_2;
    tmp_study.condition = TRIAL_TYPES{cond_i};
    %## ROBUST SAVE
    [tmp_study,tmp_alleeg] = eeglab_save_study(tmp_study,tmp_alleeg,...
                                        study_fName_2,save_dir,...
                                        'STUDY_COND',TRIAL_TYPES{cond_i});
end
%}
%%
% tmp_alleeg = cell(1,length(MAIN_ALLEEG));

tmp_alleeg = [];
study_fName_3 = sprintf('%s_MIM_study',[TRIAL_TYPES{:}]);
%- extract each condition for each subject
for subj_i = 1:length(tmp_alleeg)
    fPath = [save_dir filesep MAIN_ALLEEG(subj_i).subject filesep 'EPOCHED'];
    dir_fPath = dir([fPath filesep '*.set']);
    if ~isfield(dir_fPath,'name')
        fprintf('Subject %s doesn''t have epoched .set\n',MAIN_ALLEEG(subj_i).subject);
%         tmp_alleeg{subj_i} = MAIN_ALLEEG(subj_i);
        tmp_alleeg = [tmp_alleeg, MAIN_ALLEEG(subj_i)];
        rmv_subj(subj_i) = 1;
        rmv_subj_chars{subj_i} = MAIN_ALLEEG(subj_i).subject;
%         continue;
    else
        EEG = pop_loadset('filename',dir_fPath.name,'filepath',fPath);
%         tmp_alleeg{subj_i} = EEG;
        tmp_alleeg = [tmp_alleeg, EEG];
    end
end
fsPrev = {};
for subj_i = 1:length(tmp_alleeg)
    EEG = tmp_alleeg(subj_i);
    fs = fields(EEG);
    % delete fields not present in other structs.
    out = cellfun(@(x) any(strcmp(x,fsPrev)),fs,'UniformOutput',false); 
    out = [out{:}];
    delFs = fs(~out);
    if ~isempty(fsPrev) && any(~out)
        for j = 1:length(delFs)
            EEG = rmfield(EEG,delFs{j});
            fprintf("%s) Removing fields %s",EEG.subject,delFs{j})
        end
    else
        fsPrev = fs;
    end 
    tmp_alleeg(subj_i) = EEG;
end
%%
% tmp_alleeg = tmp_alleeg(~cellfun(@isempty,tmp_alleeg));
% tmp_alleeg = cellfun(@(x) [[]; x], tmp_alleeg);
%## CREATE NEW STUDY STRUCTURED
[tmp_study, tmp_alleeg] = std_editset(MAIN_STUDY,tmp_alleeg,...
                            'rmclust','off',...
                            'addchannellabels','on',...
                            'name',study_fName_3,...
                            'commands',{'remove',find(rmv_subj)});
%- study modifications
%     tmp_study.urcluster = MAIN_STUDY.cluster;
tmp_study.red_urcluster = MAIN_STUDY.cluster;
tmp_study.etc.rmvd_subj.inds = find(rmv_subj);
tmp_study.etc.rmvd_subj.chars = rmv_subj_chars;
tmp_study.filename = [study_fName_3 '.study'];
tmp_study.name = study_fName_3;
tmp_study.condition = [TRIAL_TYPES{:}];
%## ROBUST SAVE
[tmp_study,tmp_alleeg] = eeglab_save_study(tmp_study,tmp_alleeg,...
                                    study_fName_3,save_dir,...
                                    'STUDY_COND',[]);
%% REORGANIZE DIPFITS
tmp_study.cluster = tmp_study.urcluster;
tmp_subjs = zeros(length(unique(tmp_study.cluster(1).sets)),2);
tmp_subjs(:,1) = unique(tmp_study.cluster(1).sets);
tmp_rmvsubjs = tmp_study.rmvd_subj_inds;
%     set_inds = unique(tmpS.cluster(1).sets);
iter = 1;
for subj_i = 1:length(tmp_subjs)
    if any(subj_i == tmp_rmvsubjs)
        continue;
    else
        tmp_subjs(subj_i,2) = iter;
        iter = iter + 1;
    end
end
fprintf('==== removing cluster indices ====\n');
for subj_i = 1:length(tmp_rmvsubjs)
    for cluster_i = 2:length(tmp_study.cluster)
        inds = (tmp_study.cluster(cluster_i).sets == tmp_rmvsubjs(subj_i));
        if any(inds)
            tmp_study.cluster(cluster_i).sets(inds) = [];
            tmp_study.cluster(cluster_i).comps(inds) = [];
        else
            continue;
        end
    end
end
for cluster_i = 2:length(tmp_study.cluster)
    for comp_i = 1:length(tmp_study.cluster(cluster_i).sets)
        inds = (tmp_subjs(:,1) == tmp_study.cluster(cluster_i).sets(comp_i));
        if any(inds)
            tmp_study.cluster(cluster_i).sets(comp_i) = tmp_subjs(inds,2);
        else
            continue;
        end
    end
end
%- parentcluster alterations
all_sets = [];
all_comps = [];
for clust_i = 2:length(tmp_study.cluster)
    all_sets = [all_sets, tmp_study.cluster(clust_i).sets];
    all_comps = [all_comps, tmp_study.cluster(clust_i).comps];
end
tmp_study.cluster(1).comps = all_comps;
tmp_study.cluster(1).sets = all_sets;
%##
[tmp_study,tmp_alleeg] = eeglab_save_study(tmp_study,tmp_alleeg,...
                                    'cluster_struct_edit_study',save_dir,...
                                    'STUDY_COND',[]);